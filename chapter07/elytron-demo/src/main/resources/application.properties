# Configuration file
# key = value
# config JDBC
# les var d'env serviront dans l'env cloud
quarkus.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/quarkusdb
quarkus.datasource.driver=org.postgresql.Driver
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
# config Hibernate pour activer le mode Drop & Create
quarkus.hibernate-orm.database.generation=drop-and-create
#Config Agroal pour spécifier la taille du pool
quarkus.datasource.initial-size=1
quarkus.datasource.min-size=2
quarkus.datasource.max-size=8
# script d'insertion de données après la création des tables
quarkus.hibernate-orm.sql-load-script=import.sql
# log des instructions SQL
quarkus.hibernate-orm.log.sql=true

# le mode d'authentification basique est activée (pas dans le livre)
quarkus.http.auth.basic=true
#configuration d'Elytron
#activation de l'authentification JDBC
quarkus.security.jdbc.enabled=true
#requête retournant le password et le rôle de l'utilisateeur authentifié.
# permet à Elytron de valider que les crédentiels utilisés pour l'authentification sont valides
# permet à Elytron d'assigner le password au principal (représentant un utilisateur authentifié) si le password est valide,
# et le rôle.
#requête permettant donc de créer un principal.
quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM quarkus_user u WHERE u.username=?
# on indique que le password n'est pas chiffré -valide que pour le dev
# configuration pour que le mapper mappe la colonne contenant le mdp avec un champ en clair dans le principal
# Elystron crée donc un principal en utisant un mapper qui établit la correspondance entre le résultat de la requête et l'objet principal
quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
#indication de la colonne (l'index/position de la projection) retournée par la requête correspondant au password (index démarrant à 1)
quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1
#on spécifie que la colonne n°2 retournée doit être mappée avec l'attribut groups du Principal.
# on assigne le rôle de l'utilisateur retourné par la requête à l'attribut groups du principal créé pour l'utilisateur authentifié.
quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2
quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups