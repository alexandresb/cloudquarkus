# Configuration file
# key = value
# config JDBC
# les var d'env serviront dans l'env cloud
quarkus.datasource.url=jdbc:postgresql://${POSTGRESQL_SERVICE_HOST:localhost}:${POSTGRESQL_SERVICE_PORT:5432}/quarkusdb
quarkus.datasource.driver=org.postgresql.Driver
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
# config Hibernate pour activer le mode Drop & Create
quarkus.hibernate-orm.database.generation=drop-and-create
#Config Agroal pour spécifier la taille du pool
quarkus.datasource.initial-size=1
quarkus.datasource.min-size=2
quarkus.datasource.max-size=8
# script d'insertion de données après la création des tables
quarkus.hibernate-orm.sql-load-script=import.sql
# log des instructions SQL
quarkus.hibernate-orm.log.sql=true

#config de l'envoi des trace au service / serveur Jaeger - config du de la stratégie de tracing

#attribution d'un nom au service dans Le serveur Jaeger
#Le service customer-service (opentracing) sera référencé dans le srv Jager sous le nom quarkus-service
quarkus.jaeger.service-name=quarkus-service

#indications que toutes les traces émises doivent être considérées de la même façon
quarkus.jaeger.sampler-type=const
#indication que toutes les requêtes doivent être tracées donc êtres emises vers le serveur
quarkus.jaeger.sampler-param=1
#indication du endpoint où les traces sont envoyées - utilisation de Thrift over Http(s)
# https://www.jaegertracing.io/docs/1.18/apis/#thrift-over-http-stable.
quarkus.jaeger.endpoint=http://localhost:14268/api/traces

#fonctionnement du système de trace :
# cf. https://opentracing.io/docs/overview/
# lors du packaging Quarkus intègre une implémentation d'io.opentracing.Tracer.
# le Tracer est l'abstraction côté service tracé (agent client Jaeger) qui suit et émet les traces vers le serveur collectant
# les traces distribuées émises par les services contenant le tracer.
# (de façon simpliste) lorsque le service est requêté, le tracer intercepte ces requêtes et  émet des traces contenant les infos de requêtes
# vers le serveur Jaeger via POST vers le point de terminaison  serveur indiqué.
# le serveur récupère, stocke, réconcilie et présente les traces.