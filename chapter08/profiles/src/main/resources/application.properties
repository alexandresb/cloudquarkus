# Configuration file
# key = value
# config JDBC
# utilisation de préfixes %{profile} pour distinguer des profils de configuration différents.
# grâce au concept de profil, on peut déclarer des propriétés de configuration spécifiques d'une (appropriées à) étape
# du cycle de vie de l'app (dev, test , prod).

# on lie différentes URL de bdd à des profils de configuration spécifiques :
# Utilisation d'une bdd différente pour le dev, les tests, la prod.

#URL pour le profil de développement
%dev.quarkus.datasource.url=jdbc:postgresql://localhost:5432/postgresDev
#profil de test
%test.quarkus.datasource.url=jdbc:postgresql://localhost:6432/postgresTest
#url de la base en production
%prod.quarkus.datasource.url=jdbc:postgresql://localhost:7432/postgresProd
quarkus.datasource.driver=org.postgresql.Driver
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
# config Hibernate pour activer le mode Drop & Create
quarkus.hibernate-orm.database.generation=drop-and-create
#Config Agroal pour spécifier la taille du pool
quarkus.datasource.initial-size=1
quarkus.datasource.min-size=2
quarkus.datasource.max-size=8
#spécification de la taille du pool pour l'appli en prod - redéfinit les propriétés ci-dessus :
%prod.quarkus.datasource.initial-size=10
%prod.quarkus.datasource.min-size=10
%prod.quarkus.datasource.max-size=20
# script d'insertion de données après la création des tables
quarkus.hibernate-orm.sql-load-script=import.sql
# log des instructions SQL
quarkus.hibernate-orm.log.sql=true